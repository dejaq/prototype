namespace DejaQ;

enum TopicType : byte { Timeline = 1, PriorityQueue, Cronjob}

table ErrorDetails {
    key:string;
    value:string;
}
table Error {
    severity:ushort;
    module:ushort;
    king:ulong;
    op:string;
    message:string;
    details:[ErrorDetails];
    throttledMS:ushort;
    shouldSync:bool;
    shouldRetry:bool;
}

table TimelineMessageIDErrorTuple {
    messgeID:[ubyte];
    err:Error;
}
table TimelineResponse {
    messagesErrors:[TimelineMessageIDErrorTuple];
    err:Error;
}


table TimelineCreateMessageRequest {
    traceID:string;
    timeoutMS:ulong;
    id:[ubyte];
    tsmsutc:ulong;
    body:[ubyte];
}

table TimelinePushLeaseMessage {
    messageID:[ubyte];
    body:[ubyte];
    timestampMS:ulong;
    producerGroupID:[byte];
    version:ushort;
}

table TimelinePushLeaseRequest {
    traceID:string;
    timeoutMS:ulong;
    expirationTSMSUTC:ulong;
    consumerID:[ubyte];
    message:TimelinePushLeaseMessage;
}

table TimelineExtendLeaseRequest {
    traceID:string;
    timeoutMS:ulong;
    id:[ubyte];
}

table TimelineReleaseRequest {
    traceID:string;
    timeoutMS:ulong;
    messageID:string;
    timestampMS:ulong;
    version:ushort;
}

table TimelineDeleteRequest {
    traceID:string;
    timeoutMS:ulong;
    messageID:string;
    version:ushort;
}

table TimelineCountRequest {
    traceID:string;
    timeoutMS:ulong;
    status:ubyte;
    timeStart:ulong;
    timeEnd:ulong;
}

// https://grpc.io/docs/guides/concepts/
rpc_service Broker {
    //the broker will push messages
    TimelinePushLeases(TimelinePushLeaseRequest):TimelineResponse (streaming: "server");

    //client pushes data, expect one bulk response
    TimelineCreateMessages(TimelineCreateMessageRequest):TimelineResponse (streaming: "client");
    TimelineExtendLease(TimelineExtendLeaseRequest):TimelineResponse (streaming: "client");
    TimelineRelease(TimelineReleaseRequest):TimelineResponse (streaming: "client");
    TimelineDelete(TimelineDeleteRequest):TimelineResponse (streaming: "client");

    //unary calls, clients wants to find out something specific
    TimelineCount(TimelineCountRequest):Error;
}