namespace DejaQ;

enum TopicType : byte { Timeline = 1, PriorityQueue, Cronjob}

table ErrorDetails {
    key:string;
    value:string;
}
table Error {
    severity:ushort;
    module:ubyte;
    kind:ulong;
    op:string;
    message:string;
    details:[ErrorDetails];
    throttledMS:ushort;
    shouldSync:bool;
    shouldRetry:bool;
}

table TimelineMessageIDErrorTuple {
    messgeID:[ubyte];
    err:Error;
}
table TimelineResponse {
    err:Error;
    messagesErrors:[TimelineMessageIDErrorTuple];
}

table TimelineCreateRequest {
    traceID:string;
    timeoutMS:ulong;
    cluster:string;
    id:string;
    replicaCount:int;
    maxSecondsFutureAllowed:ulong;
    maxSecondsLease:ulong;
    checksumBodies:bool;
    maxBodySizeBytes:ulong;
    rqsLimitPerClient:ulong;
    minimumProtocolVersion:ushort;
    minimumDriverVersion:ushort;
    bucketCount:ushort;
}

table TimelineCreateMessageRequest {
    traceID:string;
    timeoutMS:ulong;
    sessionID:string;
    id:[ubyte];
    tsmsutc:ulong;
    body:[ubyte];
}

table TimelinePushLeaseMessage {
    messageID:[ubyte];
    body:[ubyte];
    timestampMS:ulong;
    producerGroupID:[ubyte];
    version:ushort;
    bucketID:ushort;
}

table TimelinePushLeaseResponse {
    traceID:string;
    timeoutMS:ulong;
    expirationTSMSUTC:ulong;
    consumerID:[ubyte];
    message:TimelinePushLeaseMessage;
}

table TimelineProducerHandshakeRequest {
    traceID:string;
    timeoutMS:ulong;
    producerGroupID:string;
    topicID:string;
    cluster:string;
    producerID:string;
}

table TimelineProducerHandshakeResponse {
    sessionID:string;
    err:Error;
}

table TimelineConsumerHandshakeRequest {
    traceID:string;
    timeoutMS:ulong;
    consumerID:string;
    topicID:string;
    cluster:string;
    leaseTimeoutMS:ulong;
}

table TimelineConsumerHandshakeResponse {
    sessionID:string;
    err:Error;
}

table TimelineConsumeRequest {
    traceID:string;
    timeoutMS:ulong;
    sessionID:string;
}

table TimelineConsumerStatus {
    traceID:string;
    timeoutMS:ulong;
    sessionID:string;
    maxBufferSize:uint;
    availableBufferSize:uint;
    lagMS:uint;
    lagNOMessages:uint;
}

table TimelineDeleteRequest {
    traceID:string;
    timeoutMS:ulong;
    sessionID:string;
    messageID:[ubyte];
    version:ushort;
    bucketID:ushort;
}

// https://grpc.io/docs/guides/concepts/
rpc_service Broker {
    //overseeer
    TimelineProducerHandshake(TimelineProducerHandshakeRequest):TimelineProducerHandshakeResponse;
    TimelineConsumerHandshake(TimelineConsumerHandshakeRequest):TimelineConsumerHandshakeResponse;
    TimelineCreate(TimelineCreateRequest):Error;

    //carrier

    //the broker will push messages
    TimelineConsume(TimelineConsumerStatus):TimelinePushLeaseResponse (streaming: "bidi");

    //client pushes data, expect one bulk response
    TimelineCreateMessages(TimelineCreateMessageRequest):TimelineResponse (streaming: "client");
    TimelineDelete(TimelineDeleteRequest):TimelineResponse (streaming: "client");

}