// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package server

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TimelinePushLeaseMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsTimelinePushLeaseMessage(buf []byte, offset flatbuffers.UOffsetT) *TimelinePushLeaseMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TimelinePushLeaseMessage{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TimelinePushLeaseMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TimelinePushLeaseMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TimelinePushLeaseMessage) MessageID(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *TimelinePushLeaseMessage) MessageIDLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimelinePushLeaseMessage) MessageIDBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TimelinePushLeaseMessage) MutateMessageID(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *TimelinePushLeaseMessage) Body(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *TimelinePushLeaseMessage) BodyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimelinePushLeaseMessage) BodyBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TimelinePushLeaseMessage) MutateBody(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *TimelinePushLeaseMessage) TimestampMS() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimelinePushLeaseMessage) MutateTimestampMS(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *TimelinePushLeaseMessage) ProducerGroupID(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *TimelinePushLeaseMessage) ProducerGroupIDLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TimelinePushLeaseMessage) MutateProducerGroupID(j int, n int8) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt8(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *TimelinePushLeaseMessage) Version() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimelinePushLeaseMessage) MutateVersion(n uint16) bool {
	return rcv._tab.MutateUint16Slot(12, n)
}

func TimelinePushLeaseMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func TimelinePushLeaseMessageAddMessageID(builder *flatbuffers.Builder, messageID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(messageID), 0)
}
func TimelinePushLeaseMessageStartMessageIDVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func TimelinePushLeaseMessageAddBody(builder *flatbuffers.Builder, body flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(body), 0)
}
func TimelinePushLeaseMessageStartBodyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func TimelinePushLeaseMessageAddTimestampMS(builder *flatbuffers.Builder, timestampMS uint64) {
	builder.PrependUint64Slot(2, timestampMS, 0)
}
func TimelinePushLeaseMessageAddProducerGroupID(builder *flatbuffers.Builder, producerGroupID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(producerGroupID), 0)
}
func TimelinePushLeaseMessageStartProducerGroupIDVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func TimelinePushLeaseMessageAddVersion(builder *flatbuffers.Builder, version uint16) {
	builder.PrependUint16Slot(4, version, 0)
}
func TimelinePushLeaseMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
