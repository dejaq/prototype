// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DejaQ

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConsumeResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsConsumeResponse(buf []byte, offset flatbuffers.UOffsetT) *ConsumeResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConsumeResponse{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ConsumeResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConsumeResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConsumeResponse) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConsumeResponse) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *ConsumeResponse) Priority() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConsumeResponse) MutatePriority(n uint16) bool {
	return rcv._tab.MutateUint16Slot(6, n)
}

func (rcv *ConsumeResponse) Body(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ConsumeResponse) BodyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ConsumeResponse) BodyBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ConsumeResponse) MutateBody(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func ConsumeResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ConsumeResponseAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(0, id, 0)
}
func ConsumeResponseAddPriority(builder *flatbuffers.Builder, priority uint16) {
	builder.PrependUint16Slot(1, priority, 0)
}
func ConsumeResponseAddBody(builder *flatbuffers.Builder, body flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(body), 0)
}
func ConsumeResponseStartBodyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ConsumeResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
