// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DejaQ

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConsumeRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsConsumeRequest(buf []byte, offset flatbuffers.UOffsetT) *ConsumeRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConsumeRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ConsumeRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConsumeRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConsumeRequest) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConsumeRequest) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *ConsumeRequest) Ack() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *ConsumeRequest) MutateAck(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func ConsumeRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ConsumeRequestAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(0, id, 0)
}
func ConsumeRequestAddAck(builder *flatbuffers.Builder, ack bool) {
	builder.PrependBoolSlot(1, ack, false)
}
func ConsumeRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
