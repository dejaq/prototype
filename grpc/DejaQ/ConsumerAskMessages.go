// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DejaQ

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ConsumerAskMessages struct {
	_tab flatbuffers.Table
}

func GetRootAsConsumerAskMessages(buf []byte, offset flatbuffers.UOffsetT) *ConsumerAskMessages {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ConsumerAskMessages{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ConsumerAskMessages) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ConsumerAskMessages) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ConsumerAskMessages) Number() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ConsumerAskMessages) MutateNumber(n uint16) bool {
	return rcv._tab.MutateUint16Slot(4, n)
}

func (rcv *ConsumerAskMessages) ConsumerId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ConsumerAskMessagesStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ConsumerAskMessagesAddNumber(builder *flatbuffers.Builder, number uint16) {
	builder.PrependUint16Slot(0, number, 0)
}
func ConsumerAskMessagesAddConsumerId(builder *flatbuffers.Builder, consumerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(consumerId), 0)
}
func ConsumerAskMessagesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
