// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DejaQ

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TimelineConsumerStatus struct {
	_tab flatbuffers.Table
}

func GetRootAsTimelineConsumerStatus(buf []byte, offset flatbuffers.UOffsetT) *TimelineConsumerStatus {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TimelineConsumerStatus{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TimelineConsumerStatus) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TimelineConsumerStatus) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TimelineConsumerStatus) TraceID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TimelineConsumerStatus) TimeoutMS() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimelineConsumerStatus) MutateTimeoutMS(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *TimelineConsumerStatus) SessionID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TimelineConsumerStatus) MaxBufferSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimelineConsumerStatus) MutateMaxBufferSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *TimelineConsumerStatus) AvailableBufferSize() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimelineConsumerStatus) MutateAvailableBufferSize(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *TimelineConsumerStatus) LagMS() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimelineConsumerStatus) MutateLagMS(n uint32) bool {
	return rcv._tab.MutateUint32Slot(14, n)
}

func (rcv *TimelineConsumerStatus) LagNOMessages() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TimelineConsumerStatus) MutateLagNOMessages(n uint32) bool {
	return rcv._tab.MutateUint32Slot(16, n)
}

func TimelineConsumerStatusStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func TimelineConsumerStatusAddTraceID(builder *flatbuffers.Builder, traceID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(traceID), 0)
}
func TimelineConsumerStatusAddTimeoutMS(builder *flatbuffers.Builder, timeoutMS uint64) {
	builder.PrependUint64Slot(1, timeoutMS, 0)
}
func TimelineConsumerStatusAddSessionID(builder *flatbuffers.Builder, sessionID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(sessionID), 0)
}
func TimelineConsumerStatusAddMaxBufferSize(builder *flatbuffers.Builder, maxBufferSize uint32) {
	builder.PrependUint32Slot(3, maxBufferSize, 0)
}
func TimelineConsumerStatusAddAvailableBufferSize(builder *flatbuffers.Builder, availableBufferSize uint32) {
	builder.PrependUint32Slot(4, availableBufferSize, 0)
}
func TimelineConsumerStatusAddLagMS(builder *flatbuffers.Builder, lagMS uint32) {
	builder.PrependUint32Slot(5, lagMS, 0)
}
func TimelineConsumerStatusAddLagNOMessages(builder *flatbuffers.Builder, lagNOMessages uint32) {
	builder.PrependUint32Slot(6, lagNOMessages, 0)
}
func TimelineConsumerStatusEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
